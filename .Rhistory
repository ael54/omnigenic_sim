knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_Mixed_Models/Week_6/")
library(nlme)
formula(Rail)
formula(Rail)
formula(ergoStool)
formula(Machines)
formula(Orthodont)
formula(Pixel)
formula(Oats)
getREsponseFormula(Oats)
getResponseFormula(Oats)
getCovariateFormula(Oats)
rm(list = ls())
k
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim")
home.dir <- getwd()
#Open all libraries
library(package = "AlphaSimR")
library(package = "simplePHENOTYPES")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omni_Four_Trait_Trick_20240509.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Multiple_Generations_of_Selection_20241216.R")
source("Simulating_Omnigenic_Genetic_Architecture/Obtain_Breeding_Values_20240515.R")
source("Functions_to_Make_Life_Easier/get.me.my.SNPs.in.hapmap.format.R")
rep <-1
factor.A <- 1
factor.B <- 0.05
factor.C <- 0.05
factor.D <- 0.05
i <- 1
j <- 0.05
k <- 0.05
el <- 0.05
source("Simulate_a_founder_Population_20240319.R")
source("Simulating_Omnigenic_Genetic_Architecture/setInputParametersforSimplePhentoypes.R")
e
this.rep <- 1
source("Simulating_Omnigenic_Genetic_Architecture/setInputParametersforSimplePhentoypes.R")
this.input.SNPs <- hapmap.file.of.founder.QTLs
these.trait.var.covar <- list()
these.genetic.value.var.covar <- list()
these.breeding.value.var.covar <- list()
these.trait.values <- list()
these.genetic.values <- list()
these.breeding.values <- list()
#Run the function that will conduct the simulations
source("Four_trait_trick_code/Four_trait_trick_Master_Script_20240509.R")
time.1 <- Sys.time()
source("Four_trait_trick_code/Four_trait_trick_Master_Script_20240509.R")
paste("Factor.A.", factor.A,
"Factor.B.", factor.B,
"Factor.C.", factor.C,
"Factor.D.", factor.D,
"Rep.", this.rep,
sep = "")
source("Simulating_Omnigenic_Genetic_Architecture/setInputParametersforSimplePhentoypes.R")
this.output.dir.name
this.input.SNPs <- hapmap.file.of.founder.QTLs
these.trait.var.covar <- list()
these.genetic.value.var.covar <- list()
these.breeding.value.var.covar <- list()
these.trait.values <- list()
these.genetic.values <- list()
these.breeding.values <- list()
#Run the function that will conduct the simulations
time.1 <- Sys.time()
source("Four_trait_trick_code/Four_trait_trick_Master_Script_20240509.R")
#Simulate the four traits in simplePHENOTYPES
four.traits.omni.core.peri.coreperi <- simulate.omni.four.trait.trick (input.SNPs = this.input.SNPs,
number.of.trait.reps = this.number.of.trait.reps,
broad.sense.H2 = this.broad.sense.H2,
number.of.core.genes = this.number.of.core.genes,
sigma.2.C = this.sigma.2.C,
sigma.2.N = this.sigma.2.N,
sigma.2.CC = this.sigma.2.CC,
sigma.2.NN = this.sigma.2.NN,
sigma.2.CN = this.sigma.2.CN,
seed.number.core.vs.perhiperal = this.seed.number.core.vs.perhiperal,
seed.number.core.add = this.seed.number.core.add,
seed.number.peripheral.add = this.seed.number.peripheral.add,
seed.number.core.core.epi = this.seed.number.core.core.epi,
seed.number.peri.peri.epi = this.seed.number.peri.peri.epi,
seed.number.core.peri.epi = this.seed.number.core.peri.epi,
seed.within.simplePHENOTYPES = this.rep,
snps.are.in.columns = this.snps.are.in.columns,
output.directory.name = this.output.directory.name)
getwd()
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim/")
source("Simulating_Omnigenic_Genetic_Architecture/setInputParametersforSimplePhentoypes.R")
this.input.SNPs <- hapmap.file.of.founder.QTLs
these.trait.var.covar <- list()
these.genetic.value.var.covar <- list()
these.breeding.value.var.covar <- list()
these.trait.values <- list()
these.genetic.values <- list()
these.breeding.values <- list()
#Run the function that will conduct the simulations
time.1 <- Sys.time()
source("Four_trait_trick_code/Four_trait_trick_Master_Script_20240509.R")
time.2 <- Sys.time()
time.2-time.1
1000/5
source("Simulate_a_founder_Population_20250610.R")
this.number.of.trait.reps <- 1
this.broad.sense.H2 <- 0.9
this.number.of.core.genes <- 7
this.sigma.2.N <- 1
this.sigma.2.C <- factor.A*this.sigma.2.N
this.sigma.2.CC <- factor.B*this.sigma.2.C
this.sigma.2.NN <- factor.C*this.sigma.2.N
this.sigma.2.CN <- factor.D*this.sigma.2.N
this.seed.number.core.vs.perhiperal <- 2*this.rep
this.seed.number.core.add <- sample(-1000000:1000000, 1)
this.seed.number.peripheral.add <- sample(-1000000:1000000, 1)
this.seed.number.core.core.epi <- sample(-1000000:1000000, 1)
this.seed.number.peri.peri.epi <- sample(-1000000:1000000, 1)
this.seed.number.core.peri.epi <- sample(-1000000:1000000, 1)
this.snps.are.in.columns <- FALSE
this.output.directory.name <- paste("Factor.A.", factor.A,
"Factor.B.", factor.B,
"Factor.C.", factor.C,
"Factor.D.", factor.D,
"Rep.", this.rep,
sep = "")
this.input.SNPs <- hapmap.file.of.founder.QTLs
these.trait.var.covar <- list()
these.genetic.value.var.covar <- list()
these.breeding.value.var.covar <- list()
these.trait.values <- list()
these.genetic.values <- list()
these.breeding.values <- list()
time.1 <- Sys.time()
source("Four_trait_trick_code/Four_trait_trick_Master_Script_20240509.R")
time.2 <- Sys.time()
time.2-time.1
rm(this.QTL.Map)
rm(these.QTL.Genotypes)
rm(the.physical.map.of.QTLs)
rm(hapmap.file.of.founder.QTLs)
rm(the.founder.SNPs)
rm(the.physical.map.of.SNPs)
rm(hapmap.file.of.founder.SNPs)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
### I (Alex Lipka) am not an expert in this, and I am sure that
#### these starting parameters were pressure tested.
#### All of these are based on/use code from "
###### jbancic_alphasimr_plants/01_LineBreeding/03_TwoPartGS/"
#This code is a slightly modified version of CreateParents.R
#For the time being, I am only going to simulate one rep.
# If we end up wanting to simulate more than one rep, a for loop
# will be put around the code below, as done beginning on
# Line 25 of 00RUNME.R. If we decide to do this, replace
# "REP <- 1" below with the beginning of the for loop
REP <- 1
output = data.frame(year     = 1:nCycles,
rep      = rep(REP, nCycles),
scenario = "",
meanG = numeric(nCycles),
varG  = numeric(nCycles),
accSel  = numeric(nCycles))
output = data.frame(year     = 1:nCycles,
rep      = rep(REP, nCycles),
scenario = "",
meanG = numeric(nCycles),
varG  = numeric(nCycles),
accSel  = numeric(nCycles))
this.nChr
this.nQtl
nCycles = nBurnin + nFuture
nParents = this.nParents  # Number of parents to start a breeding cycle
nCrosses = this.nCross # Number of crosses per year
#Source in all files
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omnigenic_Genetic_Architecture_as_a_Function_20240219.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Multiple_Generations_of_Selection_20241216.R")
source("Functions_to_Make_Life_Easier/get.me.my.SNPs.in.hapmap.format.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omni_Four_Trait_Trick_20240509.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Multiple_Generations_of_Selection_20241216.R")
source("Simulating_Omnigenic_Genetic_Architecture/Obtain_Breeding_Values_20240515.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omnigenic_Genetic_Architecture_as_a_Function_20240219.R")
source("Functions_to_Make_Life_Easier/get.me.my.SNPs.in.hapmap.format.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
nCycles = nBurnin + nFuture
nParents = this.nParents  # Number of parents to start a breeding cycle
nCrosses = this.nCross # Number of crosses per year
### I (Alex Lipka) am not an expert in this, and I am sure that
#### these starting parameters were pressure tested.
#### All of these are based on/use code from "
###### jbancic_alphasimr_plants/01_LineBreeding/03_TwoPartGS/"
#This code is a slightly modified version of CreateParents.R
#For the time being, I am only going to simulate one rep.
# If we end up wanting to simulate more than one rep, a for loop
# will be put around the code below, as done beginning on
# Line 25 of 00RUNME.R. If we decide to do this, replace
# "REP <- 1" below with the beginning of the for loop
REP <- 1
output = data.frame(year     = 1:nCycles,
rep      = rep(REP, nCycles),
scenario = "",
meanG = numeric(nCycles),
varG  = numeric(nCycles),
accSel  = numeric(nCycles))
founderPop = quickHaplo(nInd = this.nParents,
nChr = this.nChr,
segSites = this.nQtl +this.nSnp,
#Ne = this.Ne,
#histNe = this.histNe.vector,
#histGen = this.histGen.vector,
#split = this.split,
inbred = TRUE)
#Set population parameters
SP = SimParam$new(founderPop)
# Add SNP chip
SP$restrSegSites(this.nQtl, this.nSnp)
if (this.nSnp > 0) {
SP$addSnpChip(nSnpPerChr = this.nSnp/this.nChr)
}
#The file sourced in below is a slightly modified version of "CreateParents.R"
source(file = "Slightly_tweaked_scripts_from_Bancic_et_al/Finish_Creating_the_Parents.R")
source(file = "Slightly_tweaked_scripts_from_Bancic_et_al/FillPipeline_Minimal_Mods.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulate.a.founder.population()
simulate.a.founder.population
this.Ne = 30
this.nParents = 50
this.histNe.vector = c(100, 100000, 1000000)
this.histGen.vector = c(100, 1000, 10000)
this.split = NULL
this.nSelect = 112
this.nCross = 1120
this.nGenerations = 10
this.varE.during.burnin = 4
nDH = 100
famMax = 10
nPYT = 500
nAYT = 50
nEYT = 10
varE = 4
repHDRW  = 4/9
repPYT = 1
repAYT = 4
repEYT = 8
nReps   = 1
nBurnin = 20
nFuture = 2
startTP = 19
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
this.Ne = 30
this.nParents = 50
this.histNe.vector = c(100, 100000, 1000000)
this.histGen.vector = c(100, 1000, 10000)
this.split = NULL
this.nSelect = 112
this.nCross = 1120
this.nGenerations = 10
this.varE.during.burnin = 4
nDH = 100
famMax = 10
nPYT = 500
nAYT = 50
nEYT = 10
varE = 4
repHDRW  = 4/9
repPYT = 1
repAYT = 4
repEYT = 8
nReps   = 1
nBurnin = 20
nFuture = 2
startTP = 19
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulate.a.founder.population
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
simulate.a.founder.population
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
rm(list = ls())
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim/")
home.dir <- getwd()
#Open all libraries
library(package = "AlphaSimR")
library(package = "simplePHENOTYPES")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omni_Four_Trait_Trick_20240509.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Multiple_Generations_of_Selection_20241216.R")
source("Simulating_Omnigenic_Genetic_Architecture/Obtain_Breeding_Values_20240515.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omnigenic_Genetic_Architecture_as_a_Function_20240219.R")
source("Functions_to_Make_Life_Easier/get.me.my.SNPs.in.hapmap.format.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
o
source("Simulate_a_founder_Population_as_a_Function_20250610.R")
simulated.founder.pop.genos <- simulate.a.founder.population(this.nChr = 2,
this.nQtl = 50,
this.nSnp = 400)
rm(list = ls())
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim/")
home.dir <- getwd()
#Open all libraries
library(package = "AlphaSimR")
library(package = "simplePHENOTYPES")
#Source in all files
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omni_Four_Trait_Trick_20240509.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Multiple_Generations_of_Selection_20241216.R")
source("Simulating_Omnigenic_Genetic_Architecture/Obtain_Breeding_Values_20240515.R")
source("Simulating_Omnigenic_Genetic_Architecture/Simulate_Omnigenic_Genetic_Architecture_as_a_Function_20240219.R")
source("Functions_to_Make_Life_Easier/get.me.my.SNPs.in.hapmap.format.R")
#source("Simulate_a_founder_Population_as_a_Function_20250610.R")
rep <-1
factor.A <- 1
factor.B <- 0.05
factor.C <- 0.05
factor.D <- 0.05
i <- 1
j <- 0.05
k <- 0.05
el <- 0.05
this.rep <- 1
source("Simulate_a_founder_Population_20250610.R")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_Mixed_Models/Week_6/")
library(nlme)
formula(Rail)
formula(ergoStool)
formula(Machines)
formula(Orthodont)
formula(Pixel)
formula(Oats)
getGroups(Pixel, level = 1)
unique(getGroups(Pixel, level = 1))
getGroups(Pixel, level = 2)
unique(getGroups(Pixel, level = 2))
formula(PBG)
formula(PBG)
PBG.log <- update(PBG, formula = deltaBP ~ log(dose)|Rabbit)
formula(PBG.log)
unique(getCovariate(PBG.log))
unique(getCovariate(PBG))
Oxboys <- groupedData(height~age|Subject, data = read.csv("Oxboys.csv", head = TRUE),
labels = list(x = "Centered age", y = "Height"),
units = lis(y = "(cm)"))
Oxboys <- groupedData(height~age|Subject, data = read.csv("Oxboys.csv", head = TRUE),
labels = list(x = "Centered age", y = "Height"),
units = list(y = "(cm)"))
Oxboys
150*52
9500-1883
plt(BodyWeight, outer = ~ Diet, aspect = 3)
plot(BodyWeight, outer = ~ Diet, aspect = 3)
plot(Soybean, outer = ~ Variety*Year)
plot(Soybean, outer = ~ Year*Variety)
gsummary(BodyWeight, invar = TRUE)
plot(PBG, inner = ~ Treatment, scales = list(x = list(log = 2)))
ergoStool.mat <- asTable(ergoStool)
ergoStool.mat <- asTable(ergoStool)
ergoStool.mat <- asTable(ergoStool)
ergoStool.mat
View(ergoStool)
ergostool.new <- banalcnedGrouped(effort~Type|Subject, data = ergoStool.mat)
ergostool.new <- balancedGrouped(effort~Type|Subject, data = ergoStool.mat)
ergostool.new
