Rel.freq.HT
Rel.freq.HH
#Explicitly print out the proporiton of heads that were obtained
print(paste("The proportion of ", number.of.flips, " flips in which exactly zero heads was obtained is: ",
Rel.freq.TT, sep = ""))
print(paste("The proportion of ", number.of.flips, " flips in which exactly one head was obtained is: ",
(Rel.freq.TH + Rel.freq.HT), sep = ""))
print(paste("The proportion of ", number.of.flips, " flips in which exactly two heads was obtained is: ",
Rel.freq.HH, sep = ""))
}#end flip.the.coin
multiple.flips.of.coin(5)
multiple.flips.of.coin(100)
multiple.flips.of.coin(500)
multiple.flips.of.coin(1000)
multiple.flips.of.coin(10000)
multiple.flips.of.coin(100000)
multiple.flips.of.coin(1000000)
P.A <- 0.85
P.B <- 0.25
P.A.complement <- 1-P.A
P.A.complement
P.A.and.B <- 0.15
P.A.or.B <- P.A+P.B-P.A.and.B
P.A.or.B
(9/27)*(9/27)
27-9
(9/27)*(18/27)
(9/27)*(8/26)
(9/27)*(18/26)
14*0.3
4.2
c(0:3)
sum(dbinom(c(0:3), size = 14, prob = 0.30))
1-dbinom(0, size = 14, prob = 0.30)
dbinom(3, size = 9, prob = 0.30)
sum(dbinom(c(3:5), size = 16, prob = 0.30))
P.A <- 0.70
P.B <- 0.43
P.A.and.B <-
P.A.complement <- 1-P.A
P.A.and.B <-
P.A.complement <- 1-P.A
P.A.complement <- 1-P.A
P.A.complement
P.A.and.B <- 0.32
P.A.or.B <- P.A+P.B-P.A.and.B
P.A.or.B
P.A*P.B
n <- 64
Y.bar <- 220
s <- 0.25
alpha <- 0.05
alpha <- 0.05
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
W <- 0.03
s <- 0.25
n <- ((z.alpha.over.2^2)*(s^2))/((W/2)^2)
n
alpha <- 0.05
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
W <- 0.04
s <- 0.22
n <- ((z.alpha.over.2^2)*(s^2))/((W/2)^2)
n
alpha <- 0.10
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
W <- 0.04
s <- 0.22
n <- ((z.alpha.over.2^2)*(s^2))/((W/2)^2)
n
40500/3
Y <- 0.25
mu <- 0.38
sigma <- 0.07
the.z.score <- (Y - mu)/sigma
the.z.score
pi <- pnorm(the.z.score, mean = 0, sd = 1, lower.tail = TRUE)
pi
#Problem 1c
sum(dbinom(c(13:500), size = 500, p = pi))
sqrt(900)
Y <- 94
mu <- 63
sigma <- sqrt(900)
the.z.score <- (Y - mu)/sigma
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = FALSE)
30/sqrt(25)
the.z.score
Y.bar <- 94
mu <- 63
sigma <- sqrt(900)/sqrt(25)
the.z.score <- (Y.bar - mu)/sigma
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = FALSE)
n <- 14
Y.bar <- 5
s <- 1.79
alpha <- 0.10
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("90% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
#Part a
n <- 144
Y.bar <- 5
s <- 1.79
alpha <- 0.10
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("90% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
#Part b
n <- 144
Y.bar <- 5
s <- 1.79
alpha <- 0.05
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("95% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
#Part c
n <- 144
Y.bar <- 5
s <- 1.79
alpha <- 0.01
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("99% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
####Question 4
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_440/Homeworks/Solutions/HW02/AEL_Workspace")
sqrt(49)
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_440/Homeworks/Solutions/HW02/AEL_Workspace")
mean <- 70
sd <- 7
x <- seq(-4,4,length=5000)*sd + mean
hx <- dnorm(x,mean,sd)
se.4 <- 8/sqrt(4)
x.bar.4 <- seq(-4,4,length=5000)*se.4 + mean
hx.bar.4 <- dnorm(x.bar.4,mean,se.4)
se.30 <- 8/sqrt(30)
x.bar.30 <- seq(-4,4,length=5000)*se.30 + mean
hx.bar.30 <- dnorm(x.bar.30,mean,se.30)
maximum.y.value <- max(c(hx, hx.bar.4, hx.bar.30))
pdf("Homework_2.Q4.pdf")
plot(hx~x, xlab = "Values", ylab = "Density", col = "purple", ylim = c(0,maximum.y.value))
lines(hx.bar.4~x.bar.4,  col = "blue", ylim = c(0,maximum.y.value))
lines(hx.bar.30~x.bar.30,  col = "red", ylim = c(0,maximum.y.value))
legend("topleft",legend = c("Y", "Y-bar,n=4", "Y-bar,n=30"), col = c("purple", "blue","red"), lty = 1)
dev.off()
Y.bar <- 0.9
mu <- 0.99
sigma <- sqrt(0.663)/sqrt(64)
the.z.score <- (Y.bar - mu)/sigma
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = TRUE)
alpha <- 0.05
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
W <- 0.25
s <- 0.663
n <- ((z.alpha.over.2^2)*(s^2))/((W/2)^2)
n
rm(list = ls())
Y <- 80
mu <- 85
sigma <- 3
the.z.score <- (Y - mu)/sigma
the.z.score
pi <- pnorm(the.z.score, mean = 0, sd = 1, lower.tail = TRUE)
pi
#Problem 1c
sum(dbinom(c(25:500), size = 500, p = pi))
#Problem 2a
Y <- 35
mu <- 30
sigma <- sqrt(900)
the.z.score <- (Y - mu)/sigma
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = FALSE)
sqrt(900)
Y.bar <- 35
mu <- 30
pop.standard.error <- sqrt(900)/sqrt(47)
the.z.score <- (Y.bar - mu)/pop.standard.error
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = FALSE)
#Problem 3
#Part a
n <- 196
Y.bar <- 20
s <- 1.81
alpha <- 0.10
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
z.alpha.over.2
paste("90% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
lower.bound
n <- 196
Y.bar <- 20
s <- 1.81
alpha <- 0.05
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("95% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
n <- 196
Y.bar <- 20
s <- 1.81
alpha <- 0.01
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
z.alpha.over.2
paste("99% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
sqrt(121)
####Question 4
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_440/Homeworks/Solutions/Homework_2/AEL_Workspace")
mean <- 35
sd <- sqrt(121)
x <- seq(-4,4,length=5000)*sd + mean
hx <- dnorm(x,mean,sd)
setwd("/Users/alipka/Library/CloudStorage/Box-Box/CPSC_440/Homeworks/Solutions/Homework_2/AEL_Workspace")
mean <- 35
sd <- sqrt(121)
x <- seq(-4,4,length=5000)*sd + mean
hx <- dnorm(x,mean,sd)
se.3 <- sd/sqrt(3)
x.bar.3 <- seq(-4,4,length=5000)*se.3 + mean
hx.bar.3 <- dnorm(x.bar.3,mean,se.3)
se.41 <- sd/sqrt(14)
x.bar.41 <- seq(-4,4,length=5000)*se.41 + mean
hx.bar.41 <- dnorm(x.bar.41,mean,se.41)
maximum.y.value <- max(c(hx, hx.bar.3, hx.bar.41))
pdf("Homework_2.Q4.pdf")
plot(hx~x, xlab = "Values", ylab = "Density", col = "purple", ylim = c(0,maximum.y.value))
lines(hx.bar.3~x.bar.3,  col = "blue", ylim = c(0,maximum.y.value))
lines(hx.bar.41~x.bar.41,  col = "red", ylim = c(0,maximum.y.value))
legend("topleft",legend = c("Y", "Y-bar,n=3", "Y-bar,n=41"), col = c("purple", "blue","red"), lty = 1)
dev.off()
0.663/sqrt(64)
#######Extraneous code, which can be discarded
Y <- 0.90
mu <- 0.99
sigma <- 0.663
n <- 64
the.pop.standard.error <- sigma/sqrt(n)
the.z.score <- (Y - mu)/sigma
Y <- 0.90
mu <- 0.99
sigma <- 0.663
n <- 64
the.pop.standard.error <- sigma/sqrt(n)
the.z.score <- (Y - mu)/the.pop.standard.error
the.z.score
pnorm(the.z.score, mean = 0, sd = 1, lower.tail = TRUE)
alpha <- 0.05
W <- 0.25
sigma <- 0.663
z.sub.alpha.over.2<- qnorm((alpha/2), mean = 0, sd = 1, lower.tail = FALSE)
z.sub.alpha.over.2
n <- ((z.sub.alpha.over.2^2)*(sigma^2))/((W/2)^2)
n
0.20*0.40
n <- 49
Y.bar <- 75
s <- 15
alpha <- 0.01
z.alpha.over.2 <- qnorm(alpha/2, mean = 0, sd = 1, lower.tail = FALSE)
lower.bound <- Y.bar - (z.alpha.over.2*(s/sqrt(n)))
upper.bound <- Y.bar + (z.alpha.over.2*(s/sqrt(n)))
paste("99% CI for mu: [", round(lower.bound,4), ", ", round(upper.bound,4), "]", sep = "")
upper.bound - lower.bound
alpha <- 0.01
W <- 0.5
sigma <- 15
z.sub.alpha.over.2<- qnorm((alpha/2), mean = 0, sd = 1, lower.tail = FALSE)
z.sub.alpha.over.2
n <- ((z.sub.alpha.over.2^2)*(sigma^2))/((W/2)^2)
n
alpha <- 0.01
W <- 5
sigma <- 15
z.sub.alpha.over.2<- qnorm((alpha/2), mean = 0, sd = 1, lower.tail = FALSE)
n <- ((z.sub.alpha.over.2^2)*(sigma^2))/((W/2)^2)
n
getwd()
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim")
home.dir <- getwd()
load("1.FactorA..0.05.FactorB..0.05.FactorC..0.05.FactorD..1.Rep.Rdata")
ls()
View(stabilizing.subpopulation.10.prev.gen.SNPs)
View(directional.subpopulation.10.prev.gen.SNPs)
View(directional.selection.population.10.pct$current.generation@geno)
View(directional.selection.population.10.pct$current.generation@pheno)
directional.selection.population.10.pct$previous.generation@pheno
pullSnpGeno(directional.selection.population.10.pct$current.generation, simParam = SP)
#Open all libraries
library(package = "AlphaSimR")
library(package = "simplePHENOTYPES")
pullSnpGeno(directional.selection.population.10.pct$current.generation, simParam = SP)
row.names(pullSnpGeno(directional.selection.population.10.pct$previous.generation, simParam = SP))
View(pullSnpGeno(directional.selection.population.10.pct$current.generation, simParam = SP))
row.names(pullSnpGeno(directional.selection.population.10.pct$current.generation, simParam = SP))
row.names(pullSnpGeno(directional.selection.population.10.pct$current.generation, simParam = SP))
rm(list = ls())
ls()
alpha <- 0.05
W <- 0.03
sigma <- 0.31
z.sub.alpha.over.2<- qnorm((alpha/2), mean = 0, sd = 1, lower.tail = FALSE)
n <- ((z.sub.alpha.over.2^2)*(sigma^2))/((W/2)^2)
n
alpha <- 0.10
W <- 0.03
sigma <- 0.31
z.sub.alpha.over.2<- qnorm((alpha/2), mean = 0, sd = 1, lower.tail = FALSE)
n <- ((z.sub.alpha.over.2^2)*(sigma^2))/((W/2)^2)
n
mu.0 <- 249
mu.a <- 258
sigma <- 2.1
z.alpha <- qnorm(0.05, mean = 0, sd = 1, lower.tail = FALSE)
z.beta <- qnorm(0.10, mean = 0, sd = 1, lower.tail = FALSE)
delta <- mu.a-mu.0
n <- (sigma^2)*((((z.alpha+z.beta)^2))/(delta^2))
n
mu.0 <- 249
mu.a <- 252
sigma <- 2.1
z.alpha <- qnorm(0.05, mean = 0, sd = 1, lower.tail = FALSE)
z.beta <- qnorm(0.10, mean = 0, sd = 1, lower.tail = FALSE)
delta <- mu.a-mu.0
n <- (sigma^2)*((((z.alpha+z.beta)^2))/(delta^2))
n
mu.0 <- 249
mu.a <- 258
sigma <- 5.1
z.alpha <- qnorm(0.05, mean = 0, sd = 1, lower.tail = FALSE)
z.beta <- qnorm(0.10, mean = 0, sd = 1, lower.tail = FALSE)
delta <- mu.a-mu.0
n <- (sigma^2)*((((z.alpha+z.beta)^2))/(delta^2))
n
mu.0 <- 249
mu.a <- 258
sigma <- 20.1
z.alpha <- qnorm(0.05, mean = 0, sd = 1, lower.tail = FALSE)
z.beta <- qnorm(0.10, mean = 0, sd = 1, lower.tail = FALSE)
delta <- mu.a-mu.0
n <- (sigma^2)*((((z.alpha+z.beta)^2))/(delta^2))
n
getwd()
#Alex added this new line below to point to the directory where Joao's run of
# one iteration of the loop was kept
setwd("/Users/alipka/Library/CloudStorage/Box-Box/IR-281/Partial-Results-Simulations-20240918/")
load("4.FactorA..1.FactorB..1.FactorC..2.FactorD..3.Rep.Rdata")
#####Read in all of the packages that are necessary
#Read in prerequiste libaries for GAPIT
library('MASS')
library(multtest)
library(gplots)
library(sommer)
#Read in GAPIT
setwd("Scripts_Necessary_for_GAPIT")
#Set your working directory
setwd("/Users/alipka/Library/CloudStorage/Box-Box/Sabbatical_Roslin_Institute/R_workspace/omnigenic_sim")
home.dir <- getwd()
#####Read in all of the packages that are necessary
#Read in prerequiste libaries for GAPIT
library('MASS')
library(multtest)
library(gplots)
library(sommer)
#Read in GAPIT
setwd("Scripts_Necessary_for_GAPIT")
source("GAPIT_EMMA source code.txt")
source("GAPIT_Code_from_Internet_20120411_Allelic_Effect.r")
setwd(home.dir)
#This count variable will help with appending to these lists storing
# GWAS and GS summary statistics
count <- 1
#Initialize objects that will store GWAS results
these.spearman.rank.correlation.between.GWAS.core.QTNs <- list()
these.median.spearman.correlations.between.core.QTN <- list()
these.median.core.spearman.correlation.within.types.of.selection.QTN <- list()
these.median.core.spearman.correlation.different.types.of.selection.QTN <- list()
these.spearman.rank.correlation.between.GWAS.peripheral.QTNs <- list()
these.median.spearman.correlations.between.peripheral.QTN <- list()
these.median.peripheral.spearman.correlation.within.types.of.selection.QTN <- list()
these.median.peripheral.spearman.correlation.different.types.of.selection.QTN <- list()
these.spearman.rank.correlation.between.GWAS.core.SNPs <- list()
these.median.spearman.correlations.between.core.SNPs <- list()
these.median.core.spearman.correlation.within.types.of.selection.SNPs <- list()
these.median.core.spearman.correlation.different.types.of.selection.SNPs <- list()
these.spearman.rank.correlation.between.GWAS.peripheral.SNPs <- list()
these.median.spearman.correlations.between.peripheral.SNPs <- list()
these.median.peripheral.spearman.correlation.within.types.of.selection.SNPs <- list()
these.median.peripheral.spearman.correlation.different.types.of.selection.SNPs <- list()
#Initiallize objects that will store GS results
these.prediction.accuracies.QTNs <- list()
these.prediction.accuracies.SNPs <- list()
#Keep track of what setting you are on
this.setting <-  paste(factor.A,".FactorA..",factor.B, ".FactorB..",
factor.C,".FactorC..",factor.D,".FactorD..",
this.rep, ".Rep", sep = "")
this.setting
#Calculate the spearman correlation coefficients between additive
# effect estimates core and peripheral QTNs
source("QG_Analysis_Code/Run_GWAS_on_QTNs_20240815.R")
str(directional.subpopulation.10.pct.SNPs)
str(disruptive.subpopulation.trait.10.pct)
View(disruptive.subpopulation.trait.10.pct)
stabilizing.subpopulation.trait.10.pct
directional.subpopulation.trait.10.prev.gen = directional.subpopulation.trait.10.pct
directional.subpopulation.trait.20.prev.gen = directional.subpopulation.trait.10.pct
disruptive.subpopulation.trait.10.prev.gen = directional.subpopulation.trait.10.pct
disruptive.subpopulation.trait.20.prev.gen = directional.subpopulation.trait.10.pct
stabilizing.subpopulation.trait.10.prev.gen = directional.subpopulation.trait.10.pct
stabilizing.subpopulation.trait.20.prev.gen = directional.subpopulation.trait.10.pct
directional.subpopulation.QTNs.10.prev.gen = directional.subpopulation.QTNs.10.pct
directional.subpopulation.QTNs.20.prev.gen = directional.subpopulation.QTNs.10.pct
disruptive.subpopulation.QTNs.10.prev.gen = directional.subpopulation.QTNs.10.pct
disruptive.subpopulation.QTNs.20.prev.gen = directional.subpopulation.QTNs.10.pct
stabilizing.subpopulation.QTNs.10.prev.gen = directional.subpopulation.QTNs.10.pct
stabilizing.subpopulation.QTNs.20.prev.gen = directional.subpopulation.QTNs.10.pct
list.of.subpopulation.traits <- list(directional.subpopulation.trait.10.pct, directional.subpopulation.trait.20.pct,
disruptive.subpopulation.trait.10.pct, disruptive.subpopulation.trait.20.pct,
stabilizing.subpopulation.trait.10.pct, stabilizing.subpopulation.trait.20.pct,
directional.subpopulation.trait.10.prev.gen, directional.subpopulation.trait.20.prev.gen,
disruptive.subpopulation.trait.10.prev.gen,disruptive.subpopulation.trait.20.prev.gen,
stabilizing.subpopulation.trait.10.prev.gen,stabilizing.subpopulation.trait.20.prev.gen)
list.of.subpopulation.QTN <- list(directional.subpopulation.QTNs.10.pct, directional.subpopulation.QTNs.20.pct,
disruptive.subpopulation.QTNs.10.pct, disruptive.subpopulation.QTNs.20.pct,
stabilizing.subpopulation.QTNs.10.pct, stabilizing.subpopulation.QTNs.20.pct,
directional.subpopulation.QTNs.10.prev.gen, directional.subpopulation.QTNs.20.prev.gen,
disruptive.subpopulation.QTNs.10.prev.gen,disruptive.subpopulation.QTNs.20.prev.gen,
stabilizing.subpopulation.QTNs.10.prev.gen, stabilizing.subpopulation.QTNs.20.prev.gen)
names.of.subpopulations <- c("Directional.selection.10.pct","Directional.selection.20.pct",
"Disruptive.selection.10.pct", "Disruptive.selection.20.pct",
"Stabilizing.selection.10.pct","Stabilizing.selection.20.pct",
"Directional.selection.10.pct.prev.gen","Directional.selection.20.pct.prev.gen",
"Disruptive.selection.10.pct.prev.gen", "Disruptive.selection.20.pct.prev.gen",
"Stabilizing.selection.10.pct.prev.gen","Stabilizing.selection.20.pct.prev.gen")
add.effect.estimates.core.QTN <- list(Directional.selection.10.pct = NA, Directional.selection.20.pct = NA,
Disruptive.selection.10.pct = NA, Disruptive.selection.20.pct = NA,
Stabilizing.selection.10.pct = NA, Stabilizing.selection.20.pct = NA,
Directional.selection.10.pct.prev.gen = NA,Directional.selection.20.pct.prev.gen = NA,
Disruptive.selection.10.pct.prev.gen = NA, Disruptive.selection.20.pct.prev.gen = NA,
Stabilizing.selection.10.pct.prev.gen = NA, Stabilizing.selection.20.pct.prev.gen = NA)
add.effect.estimates.peripheral.QTN <- list(Directional.selection.10.pct = NA, Directional.selection.20.pct = NA,
Disruptive.selection.10.pct = NA, Disruptive.selection.20.pct = NA,
Stabilizing.selection.10.pct = NA, Stabilizing.selection.20.pct = NA,
Directional.selection.10.pct.prev.gen = NA,Directional.selection.20.pct.prev.gen = NA,
Disruptive.selection.10.pct.prev.gen = NA, Disruptive.selection.20.pct.prev.gen = NA,
Stabilizing.selection.10.pct.prev.gen = NA, Stabilizing.selection.20.pct.prev.gen = NA)
for(eye in 1:length(names.of.subpopulations)){
this.myY <- data.frame(row.names(list.of.subpopulation.traits[[eye]]),
list.of.subpopulation.traits[[eye]])
this.myGD <- data.frame(row.names(list.of.subpopulation.QTN[[eye]]),list.of.subpopulation.QTN[[eye]]) #(genotypes)
this.myGM <- data.frame(paste("X", the.physical.map.of.QTLs[,1],sep = ""),
the.physical.map.of.QTLs[,2],
the.physical.map.of.QTLs[,4])#(map locations)
this.name.of.GAPIT.directory <- paste("GWAS.of.", names.of.subpopulations[eye],
".QTNs",sep = "")
dir.create(paste(this.name.of.GAPIT.directory))
setwd(paste(this.name.of.GAPIT.directory))
myGAPIT <- GAPIT(
Y=this.myY,				#This is phenotype data
GD=this.myGD,				#This is genotype data,set it to NULL with multiple genotype files
GM=this.myGM,
PCA.total = 0,
group.from=1,		#Was 232	#Lower bound for number of group
group.to=1,			#Upper bound for number of group
group.by=1,				#range between 1 and number of individuals, smaller the finer
SNP.impute = "Major",
SNP.MAF = 0.00,
cutOff = 0.00,
)
setwd(home.dir)
#Obtain the SNP and allelic effect estimates from GAPIT
QTL.and.add.EE <- data.frame(myGAPIT$GWAS$SNP,
myGAPIT$GWAS$Effect.Est)
#Obtain the SNP and allelic effect estimates of the core QTN
add.EE.of.core.QTLs <-QTL.and.add.EE[which(
QTL.and.add.EE$myGAPIT.GWAS.SNP %in%
paste("X", four.genetic.values.omni.core.peri.coreperi$core.genes$core.genes, sep = "")),]
add.EE.of.peripheral.QTLs <-QTL.and.add.EE[-which(
QTL.and.add.EE$myGAPIT.GWAS.SNP %in%
paste("X", four.genetic.values.omni.core.peri.coreperi$core.genes$core.genes, sep = "")),]
add.effect.estimates.core.QTN[[eye]] <- add.EE.of.core.QTLs
add.effect.estimates.peripheral.QTN[[eye]] <- add.EE.of.peripheral.QTLs
} # End for(eye in 1:length(names.of.subpopulations))
eye
this.myY <- data.frame(row.names(list.of.subpopulation.traits[[eye]]),
list.of.subpopulation.traits[[eye]])
this.myGD <- data.frame(row.names(list.of.subpopulation.QTN[[eye]]),list.of.subpopulation.QTN[[eye]]) #(genotypes)
row.names(list.of.subpopulation.traits[[eye]])
list.of.subpopulation.traits
list.of.subpopulation.QTN[[eye]]
row.names(list.of.subpopulation.QTN[[eye]])
this.myGD <- data.frame(row.names(list.of.subpopulation.QTN[[eye]]),list.of.subpopulation.QTN[[eye]]) #(genotypes)
this.myGM <- data.frame(paste("X", the.physical.map.of.QTLs[,1],sep = ""),
the.physical.map.of.QTLs[,2],
the.physical.map.of.QTLs[,4])#(map locations)
this.name.of.GAPIT.directory <- paste("GWAS.of.", names.of.subpopulations[eye],
".QTNs",sep = "")
row.names(stabilizing.subpopulation.20.pct.SNPs)
row.names(stabilizing.subpopulation.trait.20.pct)
row.names(stabilizing.subpopulation.trait.20.pct) = row.names(stabilizing.subpopulation.20.pct.SNPs)
row.names(stabilizing.subpopulation.trait.20.pct)
